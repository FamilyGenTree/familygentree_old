<?php
namespace Webtrees\LegacyBundle\Legacy;

/**
 * webtrees: online genealogy
 * Copyright (C) 2015 webtrees development team
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
 * GNU General Public License for more details.
 * You should have received a copy of the GNU General Public License
 * along with this program. If not, see <http://www.gnu.org/licenses/>.
 */

use FamGenTree\AppBundle\Context\Configuration\Domain\ConfigKeys;
use Fgt\Application;
use Zend_Session;

/**
 * Class AjaxController - Base controller for all popup pages
 */
class AjaxController extends BaseController implements PageControllerInterface
{

    /**
     * @param \Symfony\Bundle\TwigBundle\Debug\TimedTwigEngine $templateEngine
     * @param string                                           $template
     */
    public function __construct(
        \Symfony\Bundle\TwigBundle\Debug\TimedTwigEngine $templateEngine,
        $template = 'WebtreesLegacyThemeBundle:Default:ajax.json.twig'
    ) {
        parent::__construct($templateEngine, $template); // TODO: Change the autogenerated stub
    }

    /**
     * Restrict access.
     *
     * @param boolean $condition
     *
     * @return $this
     */
    public function restrictAccess($condition)
    {
        if ($condition !== true) {
            http_response_code(403);
            exit;
        }

        return $this;
    }

    public function render($templateName = null, array $arguments = array())
    {
        $arguments = array_merge(
            array(
                'page_title'     => $this->getPageTitle(),
                'metaRobots'     => $this->getMetaRobots(),
                'canonicalUrl'   => $this->getCanonicalUrl(),
                'powered_by_url' => Application::i()->getConfig()->getValue(ConfigKeys::PROJECT_HOMEPAGE_URL),
                'debug'          => array(
                    'execution_time' => I18N::number(microtime(true) - WT_START_TIME, 3) . ' seconds',
                    'memory'         => I18N::number(memory_get_peak_usage(true) / 1024) . ' KB',
                    'sql_queries'    => I18N::number(Database::i()->getQueryCount())
                )
            ),
            $arguments
        );

        return parent::render($templateName, $arguments);
    }

    /**
     * What should this page show in the browserâ€™s title bar?
     *
     * @param string $page_title
     *
     * @return $this
     */
    public function setPageTitle($page_title)
    {
        // TODO: Implement setPageTitle() method.
    }

    /**
     * Some pages will want to display this as <h2> $page_title </h2>
     *
     * @return string
     */
    public function getPageTitle()
    {
        // TODO: Implement getPageTitle() method.
    }

    /**
     * What is the preferred URL for this page?
     *
     * @param $canonical_url
     *
     * @return $this
     */
    public function setCanonicalUrl($canonical_url)
    {
        // TODO: Implement setCanonicalUrl() method.
    }

    /**
     * What is the preferred URL for this page?
     *
     * @return string
     */
    public function getCanonicalUrl()
    {
        // TODO: Implement getCanonicalUrl() method.
    }

    /**
     * Should robots index this page?
     *
     * @param string $meta_robots
     *
     * @return $this
     */
    public function setMetaRobots($meta_robots)
    {
        // TODO: Implement setMetaRobots() method.
    }

    /**
     * Should robots index this page?
     *
     * @return string
     */
    public function getMetaRobots()
    {
        // TODO: Implement getMetaRobots() method.
    }

    /**
     * Get significant information from this page, to allow other pages such as
     * charts and reports to initialise with the same records
     *
     * @return Individual
     */
    public function getSignificantIndividual()
    {
        // TODO: Implement getSignificantIndividual() method.
    }

    /**
     * Get significant information from this page, to allow other pages such as
     * charts and reports to initialise with the same records
     *
     * @return Family
     */
    public function getSignificantFamily()
    {
        // TODO: Implement getSignificantFamily() method.
    }

    /**
     * Get significant information from this page, to allow other pages such as
     * charts and reports to initialise with the same records
     *
     * @return string
     */
    public function getSignificantSurname()
    {
        // TODO: Implement getSignificantSurname() method.
    }
}
